// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ConfidentialERC1155 is ERC1155, Ownable {
    // Mapping from token ID to supply
    mapping(uint256 => uint256) private _tokenSupply;
    
    // Base URI
    string private _baseURI;
    
    // Event to track token creation
    event TokenCreated(uint256 indexed tokenId, uint256 supply);
    
    constructor(string memory baseURI) ERC1155(baseURI) {
        _baseURI = baseURI;
    }
    
    // Function to mint new tokens
    function mint(address account, uint256 id, uint256 amount, bytes memory data) external onlyOwner {
        _mint(account, id, amount, data);
        _tokenSupply[id] += amount;
        emit TokenCreated(id, _tokenSupply[id]);
    }
    
    // Function to burn tokens
    function burn(address account, uint256 id, uint256 amount) external {
        require(account == msg.sender || isApprovedForAll(account, msg.sender), "ERC1155: caller is not approved");
        _burn(account, id, amount);
        _tokenSupply[id] -= amount;
    }

    // Function to get the total supply of a token
    function totalSupply(uint256 tokenId) external view returns (uint256) {
        return _tokenSupply[tokenId];
    }

    // Function to get the base URI
    function uri(uint256 tokenId) public view override returns (string memory) {
        return string(abi.encodePacked(_baseURI, tokenId.toString()));
    }
}
